#cloud-config
write_files:
- content: |
    #!/bin/sh
    docker system prune -f > /dev/null
  path: /etc/cron.hourly/docker-prune.sh
  owner: root:root
  permissions: '0700'
- content: |
    #!/bin/sh
    docker system prune --all -f > /dev/null
  path: /etc/cron.daily/docker-prune.sh
  owner: root:root
  permissions: '0700'
- content: |
    #!/usr/bin/env python
    import os
    import socket
    import sys
    import time

    (executable, s3_bucket, instance_index, manager0_ip) = sys.argv
    os.system("hostnamectl set-hostname manager%d" % int(instance_index))
    if int(instance_index) == 0:
      try:
        os.system("aws s3 cp --quiet s3://%s/ip1 /tmp/ip1" % s3_bucket)
        os.system("aws s3 cp --quiet s3://%s/manager_token /tmp/manager_token" % s3_bucket)
        if os.stat("/tmp/manager_token").st_size == 0:
          raise IOError("manager_token is empty")
        with open("/tmp/ip1", "r") as ip:
          manager1_ip = ip.read().strip()
          socket.setdefaulttimeout(1.5)
          s = socket.socket()
          try:
            s.connect((manager1_ip, 2376))
            s.connect((manager1_ip, 2377))
            s.connect((manager1_ip, 7946))
          except socket.error, e:
            raise IOError("Unable to connect to socket")
          finally:
            s.close()
          with open("/tmp/manager_token", "r") as manager_token:
            err = os.system("docker swarm join --token %s %s" % (manager_token.read().strip(), manager1_ip))
            if (err != 0):
              raise IOError("Got error code %d" % err)
      except:
        os.system("docker swarm init")
        os.system("docker swarm join-token -q worker > /tmp/worker_token")
        os.system("docker swarm join-token -q manager > /tmp/manager_token")
        os.system("aws s3 cp --quiet /tmp/worker_token s3://%s/worker_token" % s3_bucket)
        os.system("aws s3 cp --quiet /tmp/manager_token s3://%s/manager_token" % s3_bucket)
    else:
      time.sleep(10)
      os.system("aws s3 cp --quiet s3://%s/manager_token /tmp/manager_token" % s3_bucket)
      with open("/tmp/manager_token", "r") as manager_token:
        err = os.system("docker swarm join --token %s %s" % (manager_token.read().strip(), manager0_ip))
        if (err != 0):
          raise SystemError("Got error code %d" % err)
    os.system("curl http://169.254.169.254/latest/meta-data/local-ipv4 > /tmp/ip")
    os.system("aws s3 cp --quiet /tmp/ip s3://%s/ip%d" % (s3_bucket, int(instance_index)))
  path: /root/init_swarm.py
  owner: root:root
  permissions: '0700'
runcmd:
- [ systemctl, daemon-reload ]
- [ systemctl, enable, haveged.service ]
- [ systemctl, enable, docker.service ]
- [ systemctl, start, --no-block, haveged.service ]
- [ systemctl, start, --no-block, docker.service ]
- [ /root/init_swarm.py, ${s3_bucket}, '${instance_index}', ${manager0_ip} ]
